diff --git a/H/cs_par_base.h b/H/cs_par_base.h
index 31224fd12..8eebeba00 100644
--- a/H/cs_par_base.h
+++ b/H/cs_par_base.h
@@ -39,28 +39,10 @@
 /* #define LOCK_TYPE  pthread_mutex_t */
 /* #define INIT_LOCK(x)  pthread_mutex_init(&(x), NULL) */
 
-#if !defined(HAVE_PTHREAD_SPIN_LOCK)
-// Windows environment should use native threads
-# if WIN32
- #define TAKE_LOCK(x) csoundLockMutex(x)
- #define RELS_LOCK(x) csoundUnlockMutex(x)
- #define LOCK_TYPE  LPCRITICAL_SECTION
- // PTHREAD: FIXME no init function? unless createMutex should be used
- //          but has a different function signature
- #define INIT_LOCK(x) csoundCreateMutex(0)
-# else
- /* VL: 18.05.2011 enabled this to allow OSX build */
- #define TAKE_LOCK(x) pthread_mutex_lock(x)
- #define RELS_LOCK(x) pthread_mutex_unlock(x)
- #define LOCK_TYPE  pthread_mutex_t
- #define INIT_LOCK(x)  pthread_mutex_init(&(x), NULL)
-# endif
- #else
- #define TAKE_LOCK(x) pthread_spin_lock(x)
- #define RELS_LOCK(x) pthread_spin_unlock(x)
- #define LOCK_TYPE  pthread_spinlock_t
- #define INIT_LOCK(x)  pthread_spin_init(&(x), PTHREAD_PROCESS_PRIVATE)
-#endif
+#define TAKE_LOCK(x) pthread_spin_lock(x)
+#define RELS_LOCK(x) pthread_spin_unlock(x)
+#define LOCK_TYPE  pthread_spinlock_t
+#define INIT_LOCK(x)  pthread_spin_init(&(x), PTHREAD_PROCESS_PRIVATE)
 
 #define DYNAMIC_2_SERIALIZE_PAR
 
